!function(e){var t={};function r(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(o,i,function(t){return e[t]}.bind(null,i));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){r(1),r(2),r(3),r(4),e.exports=r(5)},function(e,t){void 0!==AppDependencies&&AppDependencies.push("CustomerReviews"),angular.module("CustomerReviews",[]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("workspace.customerReviews",{url:"/customerReviews",templateUrl:"$(Platform)/Scripts/common/templates/home.tpl.html",controller:["$scope","platformWebApp.bladeNavigationService",function(e,t){t.showBlade({id:"reviewsList",controller:"CustomerReviews.reviewsListController",template:"Modules/$(CustomerReviews)/Scripts/blades/reviews-list.tpl.html",isClosingDisabled:!0})}]})}]).run(["platformWebApp.mainMenuService","platformWebApp.widgetService","$state",function(e,t,r){var o={path:"browse/customerReviews",icon:"fa fa-comments",title:"Customer Reviews",priority:100,action:function(){r.go("workspace.customerReviews")},permission:"customerReview:read"};e.addMenuItem(o);t.registerWidget({controller:"CustomerReviews.customerReviewWidgetController",template:"Modules/$(CustomerReviews)/Scripts/widgets/customerReviewWidget.tpl.html"},"itemDetail")}])},function(e,t){angular.module("CustomerReviews").controller("CustomerReviews.reviewsListController",["$scope","CustomerReviews.api","platformWebApp.bladeUtils","uiGridConstants","platformWebApp.uiGridHelper",function(e,t,r,o,i){e.uiGridConstants=o;var n=e.blade;r.bladeNavigationService;n.getSearchCriteria=function(){return angular.extend(s,{searchPhrase:s.keyword?s.keyword:void 0,sort:i.getSortExpression(e),skip:(e.pageSettings.currentPage-1)*e.pageSettings.itemsPerPageCount,take:e.pageSettings.itemsPerPageCount})},n.refresh=function(){n.isLoading=!0,t.search(n.getSearchCriteria(),(function(t){n.isLoading=!1,e.pageSettings.totalItems=t.totalCount,n.currentEntities=t.results}))},n.selectNode=function(e){},n.headIcon="fa-comments",n.toolbarCommands=[{name:"platform.commands.refresh",icon:"fa fa-refresh",executeMethod:n.refresh,canExecuteMethod:function(){return!0}}];var s=e.filter=n.filter||{};s.criteriaChanged=function(){e.pageSettings.currentPage>1?e.pageSettings.currentPage=1:n.refresh()},e.setGridOptions=function(t){i.initialize(e,t,(function(t){i.bindRefreshOnSortChanged(e)})),r.initializePagination(e.$parent)}}])},function(e,t){angular.module("CustomerReviews").factory("CustomerReviews.api",["$resource",function(e){return e("api/customerReviews",{},{search:{method:"POST",url:"api/customerReviews/search"},update:{method:"PUT"}})}])},function(e,t){angular.module("CustomerReviews").controller("CustomerReviews.customerReviewWidgetController",["$scope","CustomerReviews.api","platformWebApp.bladeNavigationService",function(e,t,r){var o=e.blade,i={take:0};e.openBlade=function(){if(!e.loading&&e.totalCount){var t={id:"reviewsList",filter:i,title:'Customer reviews for "'+o.title+'"',controller:"CustomerReviews.reviewsListController",template:"Modules/$(CustomerReviews)/Scripts/blades/reviews-list.tpl.html"};r.showBlade(t,o)}},e.$watch("blade.itemId",(function(r){i.productIds=[r],r&&(e.loading=!0,t.search(i,(function(t){e.loading=!1,e.totalCount=t.totalCount})))}))}])},function(e,t,r){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,